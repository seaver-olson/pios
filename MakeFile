CC := aarch64-linux-gnu-gcc
LD := aarch64-linux-gnu-ld
OBJDUMP := aarch64-linux-gnu-objdump
OBJCOPY := aarch64-linux-gnu-objcopy
CONFIGS := -DCONFIG_HEAP_SIZE=4096

CFLAGS := -O0 -ffreestanding -fno-pie -fno-stack-protector -g3 -mcpu=cortex-a53+nofp -Wall $(CONFIGS)

ODIR = obj
SDIR = src

# List of object files
OBJS = \
	boot.o \
	delays.o \
	kernel_main.o \
	mmu.o \
	page.o \
	serial.o \
	rprintf.o \
	sd.o \
	list.o \

# Construct object file paths
OBJ = $(patsubst %,$(ODIR)/%,$(OBJS))

# Ensure object directory exists
$(ODIR):
	mkdir -p $(ODIR)

# Compile .c files to .o files
$(ODIR)/%.o: $(SDIR)/%.c | $(ODIR)
	$(CC) $(CFLAGS) -c -g -o $@ $^

# Compile .s files to .o files
$(ODIR)/%.o: $(SDIR)/%.s | $(ODIR)
	$(CC) $(CFLAGS) -c -g -o $@ $^

# Default target
.PHONY: all
all: bin rootfs.img

# Link object files to create the kernel image
bin: $(OBJ)
	$(LD) obj/* -Tkernel.ld -o kernel8.img
	cp kernel8.img kernel8.elf
	$(OBJCOPY) -O binary kernel8.img
	aarch64-linux-gnu-size kernel8.elf

# Clean up generated files
.PHONY: clean
clean:
	rm -rf $(ODIR)/*
	rm -f rootfs.img
	rm -f kernel8.img
	rm -f kernel8.elf

# Debugging with QEMU and GDB
.PHONY: debug
debug:
	screen -S qemu -d -m qemu-system-aarch64 -machine raspi3b -kernel kernel8.img -hda rootfs.img -S -s -serial null -serial stdio -monitor none -nographic -k en-us 
	TERM=xterm gdb -x gdb_init_prot_mode.txt && killall qemu-system-aarch64

# Run QEMU without debugging
.PHONY: run
run:
	qemu-system-aarch64 -machine raspi3b -kernel kernel8.img -hda rootfs.img -serial null -serial stdio -monitor none -nographic -k en-us

# Disassemble the ELF file
.PHONY: disassemble
disassemble:
	$(OBJDUMP) -D kernel8.elf

# Create the root filesystem image
.PHONY: rootfs.img
rootfs.img:
	dd if=/dev/zero of=rootfs.img bs=1M count=16
	mkfs.fat -F12 rootfs.img
	sudo mkdir -p /mnt/disk
	sudo mount rootfs.img /mnt/disk
	sudo mkdir -p /mnt/disk/boot/firmware
	sudo mkdir -p /mnt/disk/bin
	sudo mkdir -p /mnt/disk/etc
	sudo umount /mnt/disk
